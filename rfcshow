#!/usr/bin/perl
# rfcshow
# Copyright (C) Eskild Hustvedt 2008, 2009
# Copyright (C) Eric Gillespie 2009
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use warnings;

use LWP::UserAgent;
use Curses::UI;
use Curses;
use constant { true => 1, false => 0 };
use Getopt::Long;
use Cwd qw(getcwd realpath);
use File::Basename;
use File::Slurp;
use Compress::Zlib;
use Compress::Bzip2;
use IPC::Open3;

# Our version number
my $VERSION = '0.1 Alpha';
# The root Curses window
my $rootWindow;
# Download parts
my $RFCSource = 'ftp://ftp.rfc-editor.org/in-notes/';
my $RFCPrefix = 'rfc';
my $RFCSuffix = '.txt';
# For compression suffix
my $RFCTail;
# The path to the config file
my $confFile = $ENV{HOME}.'/.rfcshowrc';
my @Directories;
my $UserAgent = 'rfcshow '.$VERSION.' (LWP)';
my $RFCIndex = $RFCPrefix.'-index'.$RFCSuffix;
my $RFCFile;
my $RFCFilename;
# True if the text window has already been displayed (meaning we need
# 	to destroy it before showing another one)
my $TextWindowShowing;
# Handle sigchild, needed for open3
$SIG{CHLD} = sub
{   
	my $PID = wait;
	return(1);
};
my $LWP_ProgressMode = 0;

# Config with default values
my %config = (
	col_fg => 'white',
	col_bg => 'blue',
	source_add => 'ftp://ftp.rfc-editor.org/in-notes/',
	file_prefix => 'rfc',
	file_suffix => 'txt',
	ignore_startup_dialog => 'false',
);

# Purpose: Write the RFCShow rc file
# Usage: WriteRFCShowRC();
sub WriteRFCShowRC
{
	my %configInfo = (
		HEADER => 'RFCShow RC file',
		col_fg => 'The foreground colour (default: white)',
		col_bg => 'The background colour (default: blue)',
		source_add => 'The RFC source address (default: ftp://ftp.rfc-editor.org/in-notes/)',
		file_prefix => 'The prefix of the files on the server (default: rfc)',
		file_suffix => 'The suffix of the files on the server (default: .txt)',
		ignore_startup_dialog => 'Set to true to skip the about dialog on startup',
	);
	WriteConfigFile($confFile, \%config, \%configInfo);
}

# Purpose: LOad the RFCShow rc file
# Usage: LoadRFCShowRC();
sub LoadRFCShowRC
{
	my $colours = '^(black|red|green|yellow|blue|magneta|cyan|white)$';
	my $bool = '^(true|false)$';

	my %OptionRegexHash = (
		col_fg => $colours,
		col_bg => $colours,
		source_add => '.+',
		file_prefix => '.*',
		file_suffix => '.*',
		ignore_startup_dialog => $bool,
	);
	LoadConfigFile($confFile,\%config,\%OptionRegexHash,true);
	if ($config{col_bg} eq $config{col_fg})
	{
		RSIntWarn("col_bg equals col_fg. You won't be able to see anything! Falling back to defaults");
		$config{col_bg} = 'blue';
		$config{col_fg} = 'white';
	}
}

# Purpose: Output a internal warning
# Usage: RSIntWarn(TEXT);
sub RSIntWarn
{
	$rootWindow->leave_curses() if $rootWindow;
	warn("RFCShow: $_[0]\n");
	$rootWindow->reset_curses() if $rootWindow;
}

# Purpose: die wrapper that properly outputs to STDERR, if not the message gets hidden
# Usage: RSIntDie(MESSAGE);
sub RSIntDie
{
	RSIntWarn(@_);
	die("\n");
}

# Purpose: Display an 'ok' box
# Usage: RSInfo(Title,text);
sub RSInfo
{
	my $title = shift;
	my $text = shift;
	$rootWindow->dialog(
		-title     => $title,
		-buttons   => ['ok'],
		-message => $text,
		-tbg => $config{col_fg},
		-tfg => $config{col_bg},
		-bg => $config{col_bg},
		-fg => $config{col_fg},
		-bbg => $config{col_bg},
		-bfg => $config{col_fg},
	);
}

# Purpose: Display an yes/no box
# Usage: RSQuestion(Title,text);
# Returns true on yes, false on no.
sub RSQuestion
{
	my $title = $_[0] ? $_[0] : 'Untitled';
	my $text = $_[1] ? $_[1] : 'Text';
	my $ret = $rootWindow->dialog(
		-title     => $title,
		-buttons   => ['Yes','No'],
		-message => $text,
		-tbg => $config{col_fg},
		-tfg => $config{col_bg},
		-bg => $config{col_bg},
		-fg => $config{col_fg},
		-bbg => $config{col_bg},
		-bfg => $config{col_fg},
	);
	if ($ret)
	{
		return true;
	}
	else
	{
		return false;
	}
}

# Purpose: Display a full-screen(ish) scrollable text window
# Usage: DisplayText(TEXT STRING);
sub DisplayText
{
	my $text = shift;

	# If we already have a window showing, destroy the widgets
	if ($TextWindowShowing)
	{
		$rootWindow->delete('tvwidget');
		$rootWindow->delete('tvwin');
	}

	my $win = $rootWindow->add('tvwin','Window',
		# Padding on the top so the menu line is shown.
		-padtop => 1,
		# Padding on the bottom so the help string shows
		-padbottom => 2
	);

	my $textViewer = $win->add('tvwidget', 'TextViewer',
		# Enable the border, without this it gets hard to distinguish the
		# text being displayed from the app itself.
		-border => true,
		# Enable wrapping in case the terminal is too small for the text
		-wrapping => true,
		# Enable a vertical scrollbar. It only gets displayed if the text is
		# too long.
		-vscrollbar => true,
		-title => "$RFCFilename$RFCTail",
		# The text itself
		-text => $text
	);
	# Focus it
	$textViewer->focus();
	# And remember that we need to delete it the next time DisplayText() is
	# called.
	$TextWindowShowing = true;
}

# Purpose: Create a utility window
# Usage: my $utilWin = getNewUtilWin('TITLE', parent?, width?, height?);
#	Parent, width and height can be undef/omitted and will then use a sane default.
#	If called in array context, will return (win, ID) instead of just win.
sub getNewUtilWin
{
	my $title = $_[0] ? $_[0] : 'Untitled';
	my $parent = $_[1] ? $_[1] : $rootWindow;
	my $width = $_[2] ? $_[2] : 70;
	my $height = $_[3] ? $_[3] : 15;

	my $ID = int(rand(1000000)).time().$width.$height;
	my $win = $rootWindow->add($ID,
		'Window',
		'-title' => $title,
		'-height' => $height,
		'-width' => $width,
		'-border' => 1,
		'-centered' => 1,
		-tbg => $config{col_fg},
		-tfg => $config{col_bg},
		-bg => $config{col_bg},
		-fg => $config{col_fg},
		-bbg => $config{col_bg},
		-bfg => $config{col_fg},
		'-parent' => $parent,
	);
	if(wantarray())
	{
		return($win,$ID);
	}
	else
	{
		return($win);
	}
}

# Purpose: Create a prompt dialog, return contents
# Usage: GetInput('title','prompt text', \&CallBack);
#	This sub does not block for input, so you need to include a callback
#	which will be called with the contents of the input.
#	It will not do *anything* if the user selects cancel.
sub GetInput
{
	my $title = shift;
	my $text = shift;
	$title = $title ? $title : 'Untitled';
	$text = $text ? $text : 'This is a prompt';
	my $callback = shift;
	my ($width,$height);
	# Try to be clever calculating width and height,
	# but only when text has no newlines.
	if(not $text =~ /\n/)
	{
		$width = length($text) + 4;
		$height = 7;
	}
	else
	{
		RSIntWarn("text to GetInput() contained newlines. This might spell trouble.");
	}
	my ($win,$ID) = getNewUtilWin($title,undef,$width,$height);
	my $label = $win->add($ID.'label',
		'Label',
		-width => -1,
		'-text' => $text,
		'-y' => 1,
		-bg => $config{col_bg},
		-fg => $config{col_fg},
	);
	my $textentry = $win->add($ID.'entry',
		'TextEntry',
		-sbborder => 1,
		'-y' => 2,
	);
	my $buttons = $win->add($ID.'button',
		'Buttonbox',
		-buttons   => [
		{
			-label => '< Accept >',
			-value => 1,
			-shortcut => 1,
			-onpress => sub {
				my $te = $textentry->get();
				$rootWindow->delete($ID);
				$callback->($te);
			},
		},
		{
			-label => '< Cancel >',
			-value => 1,
			-shortcut => 2,
			-onpress => sub {
				$rootWindow->delete($ID);
			},
		},
		],
		'-y' => 3,
		'-centered' => 1,
	);


	$textentry->focus();
}

# Purpose: Write a configuration file
# Usage: WriteConfigFile(/FILE, \%ConfigHash, \%ExplanationHash);
sub WriteConfigFile {
	my ($File, $Config, $Explanations) = @_;

	# Open the config for writing
	open(my $CONFIG, '>', "$File") or do {
		# If we can't then we error out, no need for failsafe stuff - it's just the config file
		RSIntWarn("Unable to save the configuration file $File: $!");
		return(0);
	};
	if(defined($Explanations->{HEADER})) {
		print $CONFIG "# $Explanations->{HEADER}\n";
	}
	foreach(sort(keys(%{$Config}))) {
		next unless length($Config->{$_});	# Don't write empty options
		if(defined($Explanations->{$_})) {
			print $CONFIG "\n# $Explanations->{$_}";
		}
		print $CONFIG "\n$_=$Config->{$_}\n";
	}
	close($CONFIG);
}

# Purpose: Load a configuration file
# Usage: LoadConfigFile(/FILE, \%ConfigHash, \%OptionRegexHash, OnlyValidOptions?);
#  OptionRegeXhash can be available for only a select few of the config options
#  or skipped completely (by replacing it by undef).
#  If OnlyValidOptions is true it will cause LoadConfigFile to skip options not in
#  the OptionRegexHash.
sub LoadConfigFile {
	my ($File, $ConfigHash, $OptionRegex, $OnlyValidOptions) = @_;

	open(my $CONFIG, '<', "$File") or do {
		RSIntWarn(sprintf("Unable to read the configuration settings from %s: %s", $File, $!));
		return(0);
	};
	while(<$CONFIG>) {
		next if m/^\s*(#.*)?$/;
		next unless m/=/;
		chomp;
		my $Option = $_;
		my $Value = $_;
		$Option =~ s/^\s*(\w+)\s*=.*/$1/;
		$Value =~ s/^\s*\w+\s*=\s*(.*)\s*/$1/;
		if($OnlyValidOptions) {
			unless(defined($OptionRegex->{$Option})) {
				RSIntWarn("Unknown configuration option \"$Option\" (=$Value) in $File: Ignored.");
				next;
			}
		}
		unless(defined($Value)) {
			RSIntWarn("Empty value for option $Option in $File");
		}
		if(defined($OptionRegex) and defined($OptionRegex->{$Option})) {
			my $MustMatch = $OptionRegex->{$Option};
			unless ($Value =~ /$MustMatch/) {
				RSIntWarn("Invalid setting of $Option (=$Value) in the config file: Must match $OptionRegex->{Option}.");
				next;
			}
		}
		$ConfigHash->{$Option} = $Value;
	}
	close($CONFIG);
}

# Purpose: Mark something as a stub
# Usage: STUB();
sub STUB
{
	my ($package, $filename, $line, $subroutine, $hasargs,
		$wantarray, $evaltext, $is_require, $hints, $bitmask) = caller(1);
	my $msg = "STUB: $subroutine";
	RSIntWarn($msg);
}

# Purpose: Prompt for an RFC to open
# Usage: AskRFC();
sub AskRFC
{
	GetInput('Open RFC','Please enter the RFC ID you want to open', \&OpenRFC);
}

# Purpose: Opens provided RFC
# Usage: OpenRFC($rfc)
sub OpenRFC
{
	my $id = shift;
	# this needs to be found in each dir of @ProgressDir
	if(CheckRFC($id)) # stuffs values into $RFCFilename and $RFCTail
	{
		# FIXME: Something's fundamentally wrong with doing the same tests
		# twice

		my $RFCText = GetFile($RFCFilename,$RFCTail);
		if ($RFCText)
		{
			DisplayText($RFCText);
		}
		else
		{
			RSInfo('Error',"Error: rfc$id.txt was unable to be opened");
		}
	}
	else
	{
		RSInfo('Error',"Error: rfc$id.txt was unable to be opened");
	}
}

# Purpose: Exit the program
# Usage: ExitProg();
sub ExitProg
{
	STUB();
	exit(0);
}

# Purpose: Display the about dialog
# Usage: AboutDialog();
sub AboutDialog
{
	return RSInfo('About RFCShow',"This is RFCShow $VERSION.\nBring your own kitchen sink.\n\nCopyright (C) Eskild Hustvedt, Eric Gillespie\nand other authors");
}

# Purpose: Give help
# Usage: HelpMe();
sub HelpMe
{
	return RSInfo('Help',"Some day you will get help here.\nFor now you get this helpful dialog.");
}

# Purpose: Search dialog while I (ecg) hack and cut code
# Usage: SearchDialog(TYPE);
# TODO: this really REALLY needs work.
sub SearchDialog
{
	my $searchType = $_[0] ? $_[0] : '';
	my $searchTerm;
	# Currently mostly stubbed.
	# What should happen here is: (case switch on $searchType)
	# If $1 is blank, bring up a search dialog prompting for term
	# If $1 is REPEAT, search for the next occurence of term
	# If $1 is INDEX, search in the rfc-index for the requested term.
	# If $1 is ALL, search in the total rfc store for the requested term.
	# I should stuff any result into $searchterm
	# so I can use it for the next invocation
	if(not defined $searchType or not length $searchType)
	{
	# Hm. What should this search in? Currently loaded doc?
	#  What if we have no doc loaded?
		GetInput('Search','Input term to search for',
			sub
			{
#				my $file = shift;
#				RSInfo('Entering',"No file loaded, but you entered $file");
				my @search = Search(false, @_);
				SearchDisplay(@search);
			}
		);
	}
	elsif ($searchType eq 'ALL')
	{
		GetInput('Search All','Input term to search ALL documents for',
			sub
			{
				my $file = shift;
				RSInfo('Entering',"You entered $file");
			}
		);
	}
	elsif ($searchType eq 'INDEX')
	{
		if(open($RFCFile, '<', $RFCIndex))
		{
			GetInput('Search Index','Input term to search the RFC index for', 
				sub
				{
					my @search = Search(true, @_);
					SearchDisplay(@search);
				}
			);
		}
		else
		{
			RSInfo('Error',"Cannot open $RFCIndex");
		}
	}
	elsif ( $searchType eq 'REPEAT')
	# Makes no sense for INDEX, but does for current doc or ALL
	{
		# No longer the correct code, but for a stub, who cares.
		GetInput('Repeat Search','Input term to search for',
		sub
		{
			my $file = shift;
			RSInfo('Entering',"You entered $file");
		}
	);
	}
}

# Purpose: Search function - back end of Search dialog.
# Usage:  Search(filename,lookingFor)
# Returns:  a list of RFC numbers with the search term.
# Requires: valid open filehandle $RFCFile
# Provided by: Joshua.Gatcomb@gmail.com
sub Search
{
	my $skip_header = shift;
    my $search_str = uc(join ' ', @_);
    my @match;
	if ($skip_header) {
    # skip first 68 lines, what we want isn't there. Only relevant for the 
	# rfc-index
 	   <$RFCFile> for 1 .. 68;
	}
    {
        # paragraph mode
        local $/ = "";
        while (<$RFCFile>) {
            tr/\r\n/  /;
            s/\s+/ /;
			push @match, (split /\W+/, $_)[0] if index(uc($_), $search_str) != -1;
        }        
    }
    return @match;
}

# Purpose: open a bzip/gzip/lzma/plain file and hand its uncompressed contents on
# Usage: GetFile($filename,$tail);
sub GetFile
{
	my $filename = shift;
	my $tail = shift; # gotta check if next arg even HAS anything in it.
	my $return;

	# FIXME: We need more error handling
	# FIXME: Should check for readability as well as existance

#	if ( -e $filename) 
	if ( $tail eq '')
	{
		# Plain, just hand it on.
		$return = read_file($filename);
	}
#	elsif ( -e $filename.'.bz2')
	elsif ( $tail eq '.bz2')
	{
		# Uncompress bz2
		my $file = bzopen($filename.'.bz2','r');
		my $buffer;
		while($file->bzread($buffer))
		{
			$return .= $buffer;
		}
	}
#	elsif ( -e $filename.'.gz')
	elsif ( $tail eq '.gz')
	{
		# Uncompress gz
		my $file = gzopen($filename.'.gz','rb');
		my $buffer;
		while($file->gzread($buffer))
		{
			$return .= $buffer;
		}
	}
#	elsif ( -e $filename.'.lzma')
	elsif ( $tail eq '.lzma')
	{
		# XXX: Might want to convert to a perl module once one becomes more
		# 	widespread. 
		# FIXME: Also, this fails when no lzma installed.
		my($in,$out,$err);
		open3($in, $out, $err,'unlzma','-s',$filename.'.lzma');
		while(<$out>)
		{
			$return .= $_;
		}
		close($in);
		close($out);
		close($err);
	}
	return $return;
}

# Purpose: Display output of search
# Usage: SearchDisplay
sub SearchDisplay
{
	#####
	# Gobble text from the array into one var so that the dialog box can
	# render it.
	# Yes, I know I could combine these two lines, but I am t3h n00b
	# and would rather have code _I_ understand.
	my $title = "Results";
	my $SearchText = join " ", @_;
	# If we have no results, we should say so.
	my $Text = $SearchText ? $SearchText : 'No results';
	# I want (eventually) to make this into a picklist
	$rootWindow->dialog(
		-title     => $title,
		-buttons   => ['ok'],
		-message => $Text,
		-tbg => $config{col_fg},
		-tfg => $config{col_bg},
		-bg => $config{col_bg},
		-fg => $config{col_fg},
		-bbg => $config{col_bg},
		-bfg => $config{col_fg}
	);
}

# Purpose: Download files
# Usage: DownloadFiles(TYPE);
sub DownloadFiles
{
	STUB();
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Download helpers
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Purpose: LWP progression printer
# Usage: Used in the RFCShow_LWP_Wrapper class
sub LWPProgress
{
	my ($status, $response) = @_;
	if ($LWP_ProgressMode == 0)
	{
		$rootWindow->progress(
			-max => 100,
			-message => 'Downloading...',
		);
		$LWP_ProgressMode = 1;
		$rootWindow->setprogress(0);
	}
	if ($status eq 'tick')
	{
		$rootWindow->setprogress(1,'(unknown file size)');
	}
	elsif ($status eq 'begin')
	{
		return;
	}
	elsif ($status eq 'end')
	{
		$rootWindow->noprogress();
		return;
	}
	else
	{
		$status = int($status * 100);
		$rootWindow->setprogress($status);
	}
}

# Purpose: Fetch a URL, either returning the data or writing a file
# Usage: fetchURL( SOME_URL, FileName?);
# Will download to FileName if present, if undef then it will return
# the content;
sub fetchURL
{
	my $URL = shift;
	my $targetFile = shift;

	# Reset our state
	$LWP_ProgressMode = 0;

	# RFCShow_LWP_Wrapper is a GoldenPod wrapper around LWP, it is generated in
	# Main_Loop();
	my $UA = RFCShow_LWP_Wrapper->new(
		agent => $UserAgent.' libwwwperl',
	);
	my $response;

	# if we have a target file then we just use ->mirror, that downloads
	# it to a file instead and handles all the nasties for us.
	if ($targetFile)
	{
		$response = $UA->mirror($URL,$targetFile);
	}
	# If we don't, just use standard get
	else
	{
		$response = $UA->get($URL);
	}
	if(not $response->is_success)
	{
		RSIntWarn("Download of $URL failed: ".$response->status_line."\n");
		return;
	}
	# Return the content
	return $response->content;
}

# Purpose: Download a URL
# Usage: DownloadURL(ToDir, URL);
#  Also handles creating the ToDir
sub DownloadURL
{
	my ($ToDir, $URL) = @_;
	my $CWD = getcwd();
	if(not -d $ToDir)
	{
		mkdir($ToDir) or RSIntDie("Unable to mkdir $ToDir: $!\n");
	}
	chdir($ToDir);

	my $fileName = basename($URL);
	fetchURL($URL,$fileName);
}

# Purpose: Print formatted --help output
# Usage: PrintHelp("-shortoption", "--longoption", "description");
sub PrintHelp {
	printf "%-4s %-16s %s\n", $_[0], $_[1], $_[2];
}

# Purpose: Initialize
# Usage: InitMain();
sub InitMain
{
	# Var to check if rfc-index.txt is in any of @PossibleEntries
	my $Succeed = 0;
	# Possible entries
	my @PossibleEntries;
	push(@PossibleEntries,'/usr/share/doc/rfc');
	push(@PossibleEntries,'/usr/local/share/doc/rfc');
	push(@PossibleEntries,$ENV{HOME}.'/rfcshow');
	push(@PossibleEntries,$ENV{HOME}.'/rfcs');
	# Populate @Directories
	foreach(@PossibleEntries)
	{
		if (-e $_)
		{
			push(@Directories,$_);
		}
	}
	# TODO: At this stage, if none of the dirs exist, we offer to create one in $HOME
	# Load config
	if(not -e $confFile)
	{
		WriteRFCShowRC();
	}
	else
	{
		LoadRFCShowRC();
		# Re-write it so that we're sure all entries exist
		WriteRFCShowRC();
	}
	# screen workaround
	if(defined($ENV{TERM}) and $ENV{TERM} eq 'screen')
	{
		$ENV{TERM} = 'xterm';
	}
	# Side effect is that this puts value into $RFCFilename if found
	$Succeed = CheckRFC('-index');
	if ($Succeed == 0) {
		# TODO This should show a dialog box instead. Hopefully, we'll offer
		#      to download one soon. Unfortunately, Curses isn't running right now.
		RSIntWarn("Cannot find $RFCIndex, please grab a copy of it from $RFCSource\n");
	}
}

# Purpose: check if document exists in @Directories
# Usage: CheckRFC($num);
sub CheckRFC
{
	my $Succeed = 0;
	my $num = shift;
	foreach(@Directories)
	{
		my $try = $_."/";
		foreach my $ext (qw(none bz2 gz lzma)) {
			$RFCTail = $ext eq 'none' ? '' : '.'.$ext;
			if ( -e $try.$RFCPrefix.$num.$RFCSuffix.$RFCTail)  
			{
				# Only set if we've found it
				$RFCFilename = $try.$RFCPrefix.$num.$RFCSuffix;
				$Succeed = 1;
				last; #Yep, we've got it.
			}
		}
		last if $Succeed;
		# FIXME: Yes, this is all repeated. I'll fix it when I figure out how
	}
	return $Succeed;
}

# Purpose: frontend glue to open the RFC index.
# Usage: OpenIndex
sub OpenIndex
{
	OpenRFC('-index');
}

# Purpose: frontend glue to open the RFC Ref index.
# Usage: OpenRef
sub OpenRef
{
	OpenRFC('-ref');
}

# Purpose: Create the main UI for the user
# Usage: CreateMainUI();
sub CreateMainUI
{
	# Define the menu
	my @Menu = (
		{ -label => 'File', 
			-submenu => [
			{ -label => 'Open ^O', -value => \&AskRFC},
			{ -label => 'Index ^I', -value => \&OpenIndex},
			{ -label => 'Short Index ^R', -value => \&OpenRef},
			{ -label => 'Exit ^Q', -value => \&ExitProg}
			]
		},
		{ -label => 'Edit',
			-submenu => [
			{ -label => 'Search', -value => sub { SearchDialog();}},
			{ -label => 'Repeat search', -value => sub { SearchDialog('REPEAT');}},
			{ -label => 'Search in Index', -value => sub { SearchDialog('INDEX');}},
			{ -label => 'Search All', -value => sub { SearchDialog('ALL');}},
			],
		},
		{ -label => 'Grab',
			-submenu => [
			{ -label => 'All Latest', -value => sub { DownloadFiles('LATEST');}},
			{ -label => 'One', -value => sub { DownloadFiles('ONE');}},
			{ -label => 'Index', -value => sub { DownloadFiles('INDEX');}},
			],
		},
		{ -label => 'Help', 
			-submenu => [
			{ -label => 'Contents', -value => \&HelpMe},
			{ -label => 'About', -value => \&AboutDialog},
			]
		} 
	);

	# Create root widget
	$rootWindow = new Curses::UI ( 
		-clear_on_exit => 0,
		-color_support => 1
	);

	# Add the menu
	my $MenuWidget = $rootWindow->add(
		'menu','Menubar', 
		-fg   => $config{col_fg},
		-bg   => $config{col_bg},
		-menu => \@Menu,
	);

	# Create the main widget
	my $MainWidget = $rootWindow->add(
		'screen', 'Window',
		-padtop      => 1,
		-border		 => 0,
		-ipad		 => 0,
	);

	# Help information at the bottom
	# TODO: How do I change this at will? i.e. to provide a "Please wait"
	$MainWidget->add(
		'help', 'Label',
		-y 	 	 => -2,
		-width		 => -1,
		-reverse 	 => 1,
		-paddingspaces   => 1,
		-fg              => $config{col_bg},
		-bg              => $config{col_fg},
		-text 	 	 => 
		" ^Q Quit  F10 Menu"
	);
#	if(open($RFCFile, '<', $RFCIndex))
	# We already checked the file was there inside InitMain(), that's why
	# $RFCFilename and $RFCTail are defined. Weird errors if they're not.
	my $RFCText = GetFile($RFCFilename,$RFCTail);
	if ($RFCText)
	{
		DisplayText($RFCText);
	}
	else
	{
		# Oh dear, no file. Tell them so.
		RSInfo('Error', "We cannot open $RFCFilename\n");
		return;
	}
	if(not $config{ignore_startup_dialog} eq 'true')
	{
		AboutDialog();
	}
	# Keybindings
	$rootWindow->set_binding(\&ExitProg, "\cQ","\cC");
	$rootWindow->set_binding(\&AskRFC, "\cO");
	$rootWindow->set_binding(\&OpenIndex, "\cI");
	$rootWindow->set_binding(\&OpenRef, "\cR");
	$rootWindow->set_binding(sub {shift()->getobj('menu')->focus}, "\cX", KEY_F(10));
}

# Purpose: The main app loop
# Usage: MainLoop();
sub Main_Loop
{
	# Generate our private LWP subclass
	eval('package RFCShow_LWP_Wrapper; our @ISA = qw(LWP::UserAgent); sub progress { shift; return main::LWPProgress(@_)};');
	# We eval the Main_Loop so that die()s gets properly displayed to STDERR.
	eval
	{
		$rootWindow->mainloop;
	};
	RSIntDie($@) if $@;
}

GetOptions (
	'help|h' => sub {
		print "RFCShow version $VERSION\n\n";
		PrintHelp('-h','--help','Display this help screen and exit');
		PrintHelp('-v','--version', 'Display version information and exit');
		exit(0);
	},
	'version|v' => sub {
		print "RFCShow version $VERSION\n";
		exit(0);
	},
) or die "Run $0 --help for more information\n";

InitMain();
CreateMainUI();
Main_Loop();
